# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Recipe {
  id: ID!
  title: String!
  description: String
  creationDate: Date!
  ingredients: [String!]!
}

"""Date custom scalar type"""
scalar Date

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  aggregateUser: AggregateUser!
  recipe(id: String!): Recipe!
  recipes(skip: Int = 0, take: Int = 25): [Recipe!]!
}

type User {
  id: Int!
  email: String!
  username: String
  password: String!
  firstName: String
  lastName: String
  lastLogin: Date!
  isSuperuser: Boolean!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: Date!
  dateOfBirth: Date
}

input UserWhereUniqueInput {
  email: String
}

input UserWhereInput {
  id: IntFilter
  email: StringFilter
  username: NullableStringFilter
  password: StringFilter
  firstName: NullableStringFilter
  lastName: NullableStringFilter
  lastLogin: DateTimeFilter
  isSuperuser: BooleanFilter
  isStaff: BooleanFilter
  isActive: BooleanFilter
  dateJoined: DateTimeFilter
  dateOfBirth: NullableDateTimeFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

input NullableStringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

input DateTimeFilter {
  equals: Date
  not: Date
  in: [Date!]
  notIn: [Date!]
  lt: Date
  lte: Date
  gt: Date
  gte: Date
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input NullableDateTimeFilter {
  equals: Date
  not: Date
  in: [Date!]
  notIn: [Date!]
  lt: Date
  lte: Date
  gt: Date
  gte: Date
}

input UserOrderByInput {
  id: OrderByArg
  email: OrderByArg
  username: OrderByArg
  password: OrderByArg
  firstName: OrderByArg
  lastName: OrderByArg
  lastLogin: OrderByArg
  isSuperuser: OrderByArg
  isStaff: OrderByArg
  isActive: OrderByArg
  dateJoined: OrderByArg
  dateOfBirth: OrderByArg
}

enum OrderByArg {
  asc
  desc
}

type AggregateUser {
  count: Int!
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteManyUser(where: UserWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  addRecipe(newRecipeData: NewRecipeInput!): Recipe!
  removeRecipe(id: String!): Boolean!
}

input UserCreateInput {
  id: Int
  email: String!
  username: String
  password: String!
  firstName: String
  lastName: String
  lastLogin: Date
  isSuperuser: Boolean
  isStaff: Boolean
  isActive: Boolean
  dateJoined: Date
  dateOfBirth: Date
}

input UserUpdateInput {
  id: Int
  email: String
  username: String
  password: String
  firstName: String
  lastName: String
  lastLogin: Date
  isSuperuser: Boolean
  isStaff: Boolean
  isActive: Boolean
  dateJoined: Date
  dateOfBirth: Date
}

type BatchPayload {
  count: Int!
}

input UserUpdateManyMutationInput {
  id: Int
  email: String
  username: String
  password: String
  firstName: String
  lastName: String
  lastLogin: Date
  isSuperuser: Boolean
  isStaff: Boolean
  isActive: Boolean
  dateJoined: Date
  dateOfBirth: Date
}

input NewRecipeInput {
  title: String!
  description: String
  ingredients: [String!]!
}

type Subscription {
  recipeAdded: Recipe!
}
